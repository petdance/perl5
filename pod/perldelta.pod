=encoding utf8

=head1 NAME

[ this is a template for a new perldelta file.  Any text flagged as XXX needs
to be processed before release. ]

perldelta - what is new for perl v5.27.1

=head1 DESCRIPTION

This document describes differences between the 5.27.0 release and the 5.27.1
release.

If you are upgrading from an earlier release such as 5.26.0, first read
L<perl5270delta>, which describes differences between 5.26.0 and 5.27.0.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 L<C<delete>|perlfunc/delete EXPR> on key/value slices

L<C<delete>|perlfunc/delete EXPR> can now be used on key/value slices,
returning the keys along with the deleted values.
L<[perl #131328]|https://rt.perl.org/Ticket/Display.html?id=131328>

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

=head2 Default Hash Function Change

Perl 5.27.0 retires various older hash functions which are not viewed as
sufficiently secure for use in Perl. We now support four general purpose
hash functions, Siphash (2-4 and 1-3 variants), and  Zaphod32, and StadtX
hash. In addition we support SBOX32 (a form of tabular hashing) for hashing
short  strings, in conjunction with any of the other hash functions provided.

By default Perl is configured to support SBOX hashing of strings up to 24
characters, in conjunction with StadtX hashing on 64 bit builds, and
Zaphod32 hashing for 32 bit builds.

You may control these settings with the following options to Configure:

    -DPERL_HASH_FUNC_SIPHASH
    -DPERL_HASH_FUNC_SIPHASH13
    -DPERL_HASH_FUNC_STADTX
    -DPERL_HASH_FUNC_ZAPHOD32

To disable SBOX hashing you can use

    -DPERL_HASH_USE_SBOX32_ALSO=0

And to set the maximum length to use SBOX32 hashing on with:

    -DSBOX32_MAX_LEN=16

The maximum length allowed is 256. There probably isn't much point
in setting it higher than the default.

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report.  See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head2 Comma-less variable lists in formats are no longer allowed

Omitting the commas between variables passed to formats is no longer
allowed.  This has been deprecated since Perl 5.000.

=head2 The C<:locked> and C<:unique> attributes have been removed

These have been no-ops and deprecated since Perl 5.12 and 5.10,
respectively.

=head2 C<\N{}> with nothing between the braces is now illegal.

This has been deprecated since Perl 5.24.

=head2 Opening the same symbol as both a file and directory handle is no longer allowed

Using open() and opendir() to associate both a filehandle and a dirhandle
to the same symbol (glob or scalar) has been deprecated since Perl 5.10.

=head2 Use of bare C<< << >> to mean C<< <<"" >> is no longer allowed

Use of a bare terminator has been deprecated since Perl 5.000.

=head2 Setting $/ to a reference to a non-positive integer no longer allowed

This used to work like setting it to C<undef>, but has been deprecated
since Perl 5.20.

=head2 Unicode code points with values exceeding C<IV_MAX> are now fatal.

This was deprecated since Perl 5.24.

=head2 C<B::OP::terse> no longer exists.

Use C<B::Concise::b_terse> instead.

=head2 Use of inherited AUTOLOAD for non-methods is no longer allowed.

This was deprecated in Perl 5.004.

=head2 Use of strings with code points over 0xFF is not allowed for
bitwise string operators

Code points over 0xFF do not make sense for bitwise operators.

=head2 Setting C<${^ENCODING}> to a defined value is now illegal

This has been deprecated since Perl 5.22 and a no-op since Perl 5.26.

=head2 Backslash no longer escapes colon in PATH for the -S switch

Previously the C<-S> switch incorrectly treated backslash ("\") as an
escape for colon when traversing the C<PATH> environment variable.
[perl #129183]

=head2 the -DH (DEBUG_H) misfeature has been removed

On a perl built with debugging support, the C<H> flag to the C<-D>
debugging option has been removed. This was supposed to dump hash values,
but has been broken for many years.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Use of L<C<vec>|perlfunc/vec EXPR,OFFSET,BITS> on strings with code
points above 0xFF is deprecated.

Use of these is nonsensical, as C<vec> is a bit-oriented operation,
which operates on the underlying UTF-8 representation these strings must
be in, and will likely give unexpected results.

=head2 Some uses of unescaped C<"{"> are no longer fatal

Perl 5.26.0 fatalized some uses of an unescaped left brace, but an
exception was made at the last minute, specifically crafted to be a
minimal change to allow GNU Autoconf to work.  This code is heavily
depended upon, and continues to use the deprecated usage.  Its use of an
unescaped left brace is one where we have no intention of repurposing
C<"{"> to be something other than itself.

That exception is now generalized to include various other such cases
where the C<"{"> will not be repurposed.  This is to get real experience
with this more complicated change now, in case we need to issue a dot
release if we find other things like Autoconf that are important to work
around.

Note that these uses continue to raise a deprecation message.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

File::Glob has been modified to remove unnecessary backtracking and
recursion, thanks to Russ Cox. See L<https://research.swtch.com/glob>
for more details.

=item *

The ref() builtin is now much faster in boolean context, since it no
longer bothers to construct a temporary string like C<Foo=ARRAY(0x134af48)>.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<XXX> has been upgraded from version A.xx to B.yy.

=item *

L<B::Deparse> has been upgraded from version 1.40 to 1.41. It includes
many bug fixes, and in particular, it now deparses variable attributes
correctly:

    my $x :foo;  # used to deparse as
                 # 'attributes'->import('main', \$x, 'foo'), my $x;

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to L<perlbug@perl.org|mailto:perlbug@perl.org>.

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

Testing of the XS-APItest directory is now done in parallel, where
applicable.

=item *

Perl now includes a default F<.travis.yml> file for Travis CI testing
on github mirrors.  [perl #123981]

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item Windows

=over 4

=item *

Support for compiling perl on Windows using Microsoft Visual Studio 2017
(containing Visual C++ 14.1) has been added.

=back

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as a =item entry ]

=over 4

=item *

The C<PL_statbuf> interpreter variable has been removed.

=item *

The deprecated function C<to_utf8_case()>, accessible from XS code, has
been removed.

=item *

A new function
L<C<is_utf8_invariant_string_loc()>|perlapi/is_utf8_invariant_string_loc>
has been added that is like
L<C<is_utf8_invariant_string()>|perlapi/is_utf8_invariant_string>
but takes an extra pointer parameter into which is stored the location
of the first variant character, if any are found.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

Fetching the name of a glob that was previously UTF-8 but wasn't any
longer would return that name flagged as UTF-8.  [perl #131263]

=item *

The perl sprintf() function (via the underlying C function
Perl_sv_vcatpvfn_flags()) has been heavily reworked to fix many minor
bugs, including the integer wrapping of large width and precision
specifiers and potential buffer overruns. It has also been made faster in
many cases.

=item *

Exiting from an C<eval>, whether normally or via an exception, now always
frees temporary values (possibly calling destructors) I<before> setting
C<$@>. For example:

    sub DESTROY { eval { die "died in DESTROY"; } }
    eval { bless []; };
    # $@ used to be equal to "died in DESTROY" here; it's now "".

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.25.5..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
